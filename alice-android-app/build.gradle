apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
// apply plugin: 'com.chaquo.python'

// 应用自己开发的Gradle Plugin
//apply plugin: 'com.frewen.aura.gradle.plugin'
//apply plugin: 'hello-plugin'

// 或者这样也可以 https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx
// apply plugin: 'android-aspectjx'
// apply plugin: 'com.hujiang.android-aspectjx'

apply plugin: 'com.google.protobuf'
//apply plugin: 'me.ele.lancet'
apply plugin: "androidx.navigation.safeargs"


android {
    println "android Configuration Lifecycle  invoked"
    // 其实下面这个是一个方法：compileSdkVersion（29）
    // 但是括号可以省略、分号可以省略，就变成下面这个样子了。
    //  /** @see #getCompileSdkVersion() */
    //    public void compileSdkVersion(String version) {
    //        checkWritability();
    //        this.target = version;
    //    }
    compileSdkVersion rootProject.ext.compileSdkVersion    //设置编译时候的Android版本
    //设置编译时使用的构建工具的版本，Android Studio3.0后去除此项配置
    buildToolsVersion rootProject.ext.buildToolsVersion

    //第一步： 使用 DataBinding必须添加这个开关
    dataBinding {
        enabled = true
    }

    defaultConfig {
        // 项目的包名
        applicationId "com.frewen.android.demo"
        // 项目最低兼容的版本
        // 指定项目最低兼容的版本，如果设备小于这个版本或者大于maxSdkVersion(一般不用)将无法安装这个应用，
        // 这里指定为16，表示最低兼容到Android 4.1系统。
        minSdkVersion rootProject.ext.minSdkVersion22
        // 项目的目标版本
        // 指定项目的目标版本，表示在该目标版本上已经做过充分测试，
        // 系统会为该应用启动一些对应该目标系统的最新功能特性，Android系统平台的行为变更，
        // 只有targetSdkVersion的属性值被设置为大于或等于该系统平台的API版本时，才会生效。
        // 例如，若指定targetSdkVersion值为22，则表示该程序最高只在Android5.1版本上做过充分测试，
        // 在Android6.0系统上（对应targetSdkVersion为23）拥有的新特性如系统运行时权限等功能就不会被启用。
        targetSdkVersion rootProject.ext.targetSdkVersion
        // 版本号 一般每次打包上线时该值只能增加，打包后看不见。
        versionCode 1
        // 版本名称 展示在应用市场上的版本名称
        versionName "1.0"
        // 表明要使用AndroidJUnitRunner进行单元测试。
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        // python {
        //     // ......
        //     pip {
        //         install "httpstat"
        //     }
        // }
        // 指定abi，如需在模拟器调试，增加"x86"，否则指定"armeabi-v7a"即可
        ndkVersion "21.0.6113669"
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
        // 导入CMake构建。声明C++的版本号
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
                // cppFlags "-std=c++11 -frtti -fexceptions"
                arguments "-DANDROID_STL=c++_shared"
            }
        }

//        aspectjx {
//            //false 关闭AspectJX功能  true 开启
////            enabled true
//            include 'com.frewen.android.demo.*' // 'com.frewen.android.demo.app.*'
//
//            //排除所有package路径中包含`android.support`的class文件及库（jar文件）
////            exclude 'com.alibaba'
////            exclude 'android.support'
////            exclude 'org.apache.weex'
////            exclude 'com.aliyun'
////            exclude 'com.taobao'
////            exclude 'alibaba'
//        }
    }
    // 这个闭包主要指定生成安装文件的主要配置，一般包含两个子闭包，一个是debug闭包，用于指定生成测试版安装文件的配置，可以忽略不写；
    // 另一个是release闭包，用于指定生成正式版安装文件的配置。
    // 两者能配置的参数相同，最大的区别默认属性配置不一样，两种模式支持的属性配置如下图：
    buildTypes {
        release {// 生产环境
            minifyEnabled false//是否对代码进行混淆
            //指定混淆的规则文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            pseudoLocalesEnabled false//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多
            zipAlignEnabled true//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率
        }
        debug {// 测试环境
            minifyEnabled false//是否对代码进行混淆
            //指定混淆的规则文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug//设置签名信息
            debuggable true     //是否支持断点调试
            jniDebuggable true  //是否可以调试NDK代码
            renderscriptDebuggable false//是否开启渲染脚本就是一些c写的渲染方法
            zipAlignEnabled true//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率
            pseudoLocalesEnabled false//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多
            applicationIdSuffix 'debug'//在applicationId 中添加了一个后缀，一般使用的不多
            versionNameSuffix '-debug'//versionName 中添加了一个后缀，一般使用的不多
        }

        // 其实这个地方就是告知Gradle的进行Cmake编译的路径和版本号
        // 具体怎么编译是CMakeList的事情
        // 我们暂时先注释掉cmake的版本号3.10.2.目前cmake3.6.0可以正常打印日志
        // 执行gradle task externalNativeBuildTask
        externalNativeBuild {
            cmake {
                path "src/main/cpp/CMakeLists.txt"  //构建脚本的路径
                // version "3.10.2"                    //CMake的版本
                version "3.6.0"                    //CMake的版本
            }
        }
    }

//    productFlavors {
//        google {}
//        xiaomi {}
//        huawei {}
//    }

    applicationVariants.all { variant ->
        variant.outputs.each {

        }
    }

    //使用Java8 ButterKnife、Hilt等框架使用Java 8的功能
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // 设置Kotlin也使用1.8
    kotlinOptions {
        jvmTarget = "1.8"
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
    }

    repositories {
        flatDir {
            dirs 'libs'   // aar目录
        }
    }

    sourceSets {
        main {
            // 定义proto文件目录
            proto {
                // In addition to the default 'src/main/proto'
                srcDir 'src/main/protobuf'
                srcDir 'src/main/protocolbuffers'
                // In addition to the default '**/*.proto' (use with caution).
                // Using an extension other than 'proto' is NOT recommended,
                // because when proto files are published along with class files, we can
                // only tell the type of a file from its extension.
                include '**/*.protodevel'
            }
            java {
                srcDir 'src/main/java'
            }
        }
        test {
            proto {
                // In addition to the default 'src/test/proto'
                srcDir 'src/test/protocolbuffers'
            }
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.annotation:annotation:1.1.0'

    //=====================<editor-folder desc = "Kotlin标准库的依赖">===============================
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //=====================</editor-folder desc = "Kotlin标准库的依赖">===============================

    //==========<editor-folder desc = "Dependence:添加单元测试相关的依赖">=============================
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    //==========</editor-folder desc = "Dependence:添加单元测试相关的依赖">============================

    //==============<editor-folder desc = "Dependence:ConstraintLayout依赖">=========================
    implementation dep.constraintlayout
    //==============</editor-folder desc = "Dependence:ConstraintLayout依赖">========================

    //======<editor-folder desc = "Dependence:性能监控方面的依赖">====================================

    //======<editor-folder desc = "Dependence:Android Performance Monitor依赖">======================
    implementation 'com.github.markzhai:blockcanary-android:1.5.0'
    // 仅在debug包启用BlockCanary进行卡顿监控和提示的话，可以这么用
    // debugImplementation 'com.github.markzhai:blockcanary-android:1.5.0'
    // releaseImplementation 'com.github.markzhai:blockcanary-no-op:1.5.0'
    //======</editor-folder desc = "Dependence:Android Performance Monitor依赖">=====================

    //======<editor-folder desc = "Dependence:ANR-WatchDog依赖">====================================
    // A simple watchdog that detects Android ANRs (Application Not Responding).
    // https://github.com/SalomonBrys/ANR-WatchDog
    implementation 'com.github.anrwatchdog:anrwatchdog:1.4.0'
    //======</editor-folder desc = "Dependence:ANR-WatchDog依赖">===================================

    //======<editor-folder desc = "Dependence:LeakCanary依赖">====================================
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'
    //======</editor-folder desc = "Dependence:LeakCanary依赖">===================================

    //======<editor-folder desc = "Dependence:dexposed的AOP框架依赖">================================
    implementation 'com.taobao.android:dexposed:0.1.1@aar'
    //======</editor-folder desc = "Dependence:dexposed的AOP框架依赖">===============================

    //======<editor-folder desc = "Dependence:lancet的AOP框架依赖">================================
//    compileOnly 'me.ele:lancet-base:1.0.6'
    //======</editor-folder desc = "Dependence:lancet的AOP框架依赖">===============================

    //======<editor-folder desc = "Dependence:Aspectj的AOP框架依赖">================================
    implementation 'org.aspectj:aspectjrt:1.8.+'
    //======</editor-folder desc = "Dependence:Aspectj的AOP框架依赖">================================

    //======</editor-folder desc = "Dependence:性能监控方面的依赖">====================================

    //======<editor-folder desc = "Dependence:ExoPlayer的相关依赖">===================================
    implementation 'com.google.android.exoplayer:exoplayer-core:2.11.7'
    implementation 'com.google.android.exoplayer:exoplayer-dash:2.11.7'
    implementation 'com.google.android.exoplayer:exoplayer-ui:2.11.7'
    //======</editor-folder desc = "Dependence:ExoPlayer的相关依赖">==================================

    implementation project(path: ':nyx-android-app-library')

    implementation(name: 'httpstat-debug', ext: 'aar')

    //===================添加Fast Android Networking Library网络请求框架=============================
    // Github地址：https://github.com/amitshekhariitbhu/Fast-Android-Networking
    // Then initialize it in onCreate() Method of application class :
    // AndroidNetworking.initialize(getApplicationContext());
    implementation 'com.amitshekhar.android:android-networking:1.0.2'
    //===================添加Fast Android Networking Library网络请求框架=============================

    // Dagger2的依赖：https://github.com/google/dagger
    kapt dep.dagger2Compiler
    kapt dep.dagger2AndroidProcessor

    // https://github.com/JakeWharton/RxBinding
    // implementation 'com.jakewharton.rxbinding3:rxbinding:3.0.0-alpha2'

    //eventBus
    implementation 'org.greenrobot:eventbus:3.1.1'


    //===================JetPack的Room框架依赖=======================================================
    def room_version = "2.2.5"
    kapt "androidx.room:room-compiler:$room_version"
    //===================JetPack的Room框架依赖=======================================================


    // lombok的最新版本 在3.2上有问题。不能使用，需要降回到1.16
    //  https://github.com/rzwitserloot/lombok/issues/1882
    compileOnly 'org.projectlombok:lombok:1.16.22'
    annotationProcessor 'org.projectlombok:lombok:1.16.22'

    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.0.0'
    //=========================ButterKnife框架引入===================================================
    kapt dep.butterknifeCompiler


    // 添加JavaWebSocket的依赖
    // https://github.com/TooTallNate/Java-WebSocket
    implementation "org.java-websocket:Java-WebSocket:1.4.0"

    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'

    annotationProcessor dep.glide
    // 添加材料设计的Material Dialog的依赖
    // https://github.com/afollestad/material-dialogs
    implementation 'com.afollestad.material-dialogs:core:3.1.1'
    implementation 'com.afollestad.material-dialogs:input:3.1.1'
    implementation 'com.afollestad.material-dialogs:bottomsheets:3.1.1'

    implementation project(':aura-navigation:aura-navigation-annotations')
    //如果你使用kotlin,这里需要使用 kapt project
    kapt project(":aura-navigation:aura-navigation-compiler")

    // 引入fastjson的依赖：https://github.com/alibaba/fastjson
    implementation 'com.alibaba:fastjson:1.2.70'
    implementation 'com.alibaba:fastjson:1.1.71.android'
    // https://github.com/guolindev/PermissionX
    implementation 'com.permissionx.guolindev:permission-support:1.2.2'
    // https://github.com/hdodenhof/CircleImageView
    implementation 'de.hdodenhof:circleimageview:3.1.0'


//    implementation 'org.aspectj:aspectjrt:1.8.+'
//    implementation 'org.aspectj:aspectjrt:1.9.5'


    // 定义protobuf依赖，使用精简版
    api 'com.google.protobuf:protobuf-java:3.5.1'
    api 'com.google.protobuf:protoc:3.5.1'
    implementation('com.squareup.retrofit2:converter-protobuf:2.2.0') {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
    }

    implementation 'cat.ereza:customactivityoncrash:2.3.0'

    //=================<editor-folder desc = "Dependence:多彩绚丽的Dialog的控件">===================
    // https://github.com/afollestad/material-dialogs
    implementation 'com.afollestad.material-dialogs:core:3.3.0'
    implementation 'com.afollestad.material-dialogs:input:3.3.0'
    implementation 'com.afollestad.material-dialogs:color:3.3.0'
    implementation 'com.afollestad.material-dialogs:files:3.3.0'
    implementation 'com.afollestad.material-dialogs:datetime:3.3.0'
    implementation 'com.afollestad.material-dialogs:bottomsheets:3.3.0'
    implementation 'com.afollestad.material-dialogs:lifecycle:3.3.0'
    //================= </editor-folder desc = "多彩绚丽的Dialog的控件">===========================

    //=================<editor-folder desc = "Dependence:PngDecoder框架依赖">========================
    // implementation 'rapid.decoder:library:0.3.0'
    // implementation 'rapid.decoder:png-decoder:0.3.0'
    //================= </editor-folder desc = "Dependence:PngDecoder框架依赖">======================

    //==========<editor-folder desc = "Dependence:OpenCV的相关依赖">=============================
    implementation project(path: ':openCVLibrary3412')
    // Tesseract是一个兼容各种操作系统平台的开源OCR识别引擎:https://github.com/rmtheis/tess-two
    implementation 'com.rmtheis:tess-two:8.0.0' //
    //==========</editor-folder desc = "Dependence:OpenCV的相关依赖">============================

    //==========<editor-folder desc = "Dependence:AndroidSupportSkin框架">===========================
    // skin-support 基础控件支持
    // implementation 'skin.support:skin-support:3.1.4'
    // skin-support-design material design 控件支持[可选]
    // implementation 'skin.support:skin-support-design:3.1.4'
    // skin-support-cardview CardView 控件支持[可选]
    // implementation 'skin.support:skin-support-cardview:3.1.4'
    // skin-support-constraint-layout ConstraintLayout 控件支持[可选]
    // implementation 'skin.support:skin-support-constraint-layout:3.1.4'
    //==========</editor-folder desc = "Dependence:AndroidSupportSkin框架">==========================

}


afterEvaluate {
    assembleDebug {
        // dependsOn tasks.findByPath(':helloTaskApi2')
        doFirst {
            println("=================assembleDebug doFirst111111=================")
        }
        doLast {
            println("=================assembleDebug doLast2222222=================")
        }
    }
}

tasks.whenTaskAdded { task ->
    // 通过这个方法我们可以看看Android的构建
    if (task.name == 'assembleDebug') {
        println("=====================:tyche-android-app assembleDebug  whenTaskAdded task:${task.name}=========================")
        println "task  path = ${task.path}"
        println tasks.findByPath(':helloOrderTask3')
        // 这个地方没有生效？？
        // task.mustRunAfter tasks.findByPath(':helloTaskApi2')
        // 如果这个工程目录的Task
        println(tasks.findByPath(":tyche-android-app:assembleDebug"))
        task.doFirst {
            println("=====================assembleDebug  whenTaskAdded doFirst=========================")
        }
        task.doLast {
            println("=====================assembleDebug  whenTaskAdded doLast=========================")
        }
    }
}