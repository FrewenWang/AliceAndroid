// Top-level build file where you can add configuration options common to all sub-projects/modules.
/**
 * 下面这些都是闭包调用。
 * 设置构建的脚本的版本信息等
 */
buildscript {
    ext.kotlin_version = '1.3.61'//kotlin的版本
    ext.anko_version = '0.10.8'
    /**
     * 这个闭包里面传入的插件依赖的仓库。
     * 该闭包中声明了jcenter()和google()的配置，其中jcenter是一个代码托管仓库，
     * 上面托管了很多Android开源项目，在这里配置了jcenter后我们可以在项目中方便引用jcenter上的开源项目，
     * 从Android Studio3.0后新增了google()配置，可以引用google上的开源项目。
     */
    repositories {
        google()
        jcenter()
        // 这个闭包里面传入的插件依赖的仓库。注意：使用本地依赖库，首先要启动artifactory
        // 具体见：//tool_kits/artifactory-start.sh
//        maven { url 'http://localhost:8081/artifactory/frewen_maven_group/' }
    }
    /**
     * 该闭包使用classpath声明了一个Gradle插件，
     * 由于Gradle并不只是用来构建Android项目，因此此处引入相关插件来构建Android项目，
     * 其中'3.6.3'为该插件的版本号，可以根据最新的版本号来调整。
     */
    dependencies {
        // 应用Gradle插件
        classpath 'com.android.tools.build:gradle:3.6.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

    }
}

/**
 * 使用闭包设置所有的工程的依赖。
 * allprojects只是一个方法。接受一个闭包作为参数。对工程进行遍历。遍历的过程中使用我们自定义的闭包。
 * 所以我们可以在比暴力进行配置、打印、输出或者修改Project的属性都可以。
 */
allprojects {
    repositories {
        google()
        jcenter()
        // 我们在自己的artifactory中包含了google和jcenter的远程maven仓库
//        maven { url 'http://localhost:8081/artifactory/frewen_maven_group/' }
        maven { url 'https://dl.bintray.com/frewenwong/androidmaven' }
        maven { url 'https://jitpack.io' }
    }
}
/**
 * gradle主工程执行的clean的task.就是删除rootProject.buildDir 工程根目录下的build文件夹
 * */
task clean(type: Delete) {
    delete rootProject.buildDir
}

//添加工程根目录下外部的的'dependencies.gradle'文件依赖。也是使用在线的依赖配置
// TODO 后续会使用git submodule 来添加自动下载本地依赖
apply from: rootProject.file('../GradleDependence/app_dependencies.gradle')
//apply from: 'https://gitee.com/frewen1225/gradle_dependence/raw/master/app_dependence.gradle'

// 往.git目录下注入 pre-commit 文件
apply from: 'hooks/install-git-hooks.gradle'

apply from: 'quality/quality.gradle'

// 下面就是我们调试Gradle. Gradle中的Task要想被执行。首先必须引导到一个Project中
// 否则会报：Task 'myTask' not found in root project 'HelloAndroid'.
apply from: 'gradle_demo/gradle_closure.gradle'
apply from: 'gradle_demo/gradle_task.gradle'
apply from: 'gradle_demo/gradle_task_dependencies.gradle'
apply from: 'gradle_demo/gradle_task_api.gradle'
apply from: 'gradle_demo/gradle_ext_property.gradle'
apply from: 'gradle_demo/gradle_custom_task.gradle'
apply from: 'gradle_demo/gradle_task_in_order.gradle'

// Define versions in a single place
ext {
    // App dependencies
//    appCompatVersion = '1.1.0-beta01'
//    constraintLayoutVersion = '2.0.0-beta1'
//    coreTestingVersion = '2.0.0'
//    coroutinesVersion = "1.3.0-M2"
//    espressoVersion = '3.1.1'
//    fragmentVersion = '1.1.0-alpha09'
//    glideVersion = '4.9.0'
//    gradleVersion = '3.5.0'
//    gsonVersion = '2.8.2'
//    junitVersion = '4.12'
//    kotlinVersion = '1.3.41'
//    ktlintVersion = '0.33.0'
//    ktxVersion = '1.0.2'
//    lifecycleVersion = '2.2.0-alpha01'
    materialVersion = '1.1.0-alpha09'
    navigationVersion = '2.0.0'
//    recyclerViewVersion = '1.1.0-alpha05'
//    roomVersion = '2.1.0'
//    runnerVersion = '1.0.1'
//    truthVersion = '0.42'
//    testExtJunit = '1.1.0'
//    uiAutomatorVersion = '2.2.0'
//    viewPagerVersion = '1.0.0-beta03'
//    workVersion = '2.1.0'
}
