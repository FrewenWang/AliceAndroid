// 这种双箭头的调用方法已经废弃掉
// 如果使用会报：Could not find method leftShift() for arguments
// 操作符 << 在Gradle 4.x中被弃用（deprecated），并且在Gradle 5.0 被移除（removed）
// 解决方式：删除操作符 <<  使用下面的方法，放在doLast的闭包方法
//task helloClosure << {
// 有可能还会看到部分Demo中是下面这样写的。也已经过时了。
//task helloClosure.leftShift {

//下面我们我们来分析一下闭包的演进过程：
//首先，我们定义一个Task

task helloClosure {

    println "helloClosure Configuration Lifecycle  invoked"

    doFirst {
        println "helloClosure doFirst  invoked"
    }
    doLast {
        println "helloClosure doLast  invoked"
        // 使用自定义的方法，方法接收一个闭包作为参数
        myClosureEach {
            // 如果这个闭包的调用只有一个参数的活，可以直接通过it指代这个参数
            // 这个在类似于Kotlin这个新型语言比较常见
            println(it)
        }

        // 假设闭包里面传入多个参数呢？
        // 当闭包传入多个参数的时候，我们就不能使用it了。
        // 必现要显示的声明出来
        // 正如这个例子：k,v -> 用于把这个闭包的参数和主体区分出来
        myClosureEachMap { k, v ->
            println "${k} is ${v}"
            // 这个地方注意：即时多行代码，也不需要加大括号
            println("Hello")
        }

    }
}

def myClosureEach(closure) {
    // 模拟一个数组的迭代方法
    for (int i in 1..10) {
        //closure(i)
        // 除了直接调用，我们还可以怎么调用？？
        // 调用call
        closure.call(i)
    }
}

def myClosureEachMap(closure) {
    def map = ["name": "Frewen.Wong", "age": 18]
    // 这个Map的each方法其实也是一个闭包
    map.each {
        closure(it.key, it.value)
    }
}


/**
 * Gradle更加强大的点在于：支持闭包方法的委托
 *
 */
task helloClosureDelegate {
    println "helloClosureDelegate Configuration Lifecycle  invoked"

    doFirst {
        println "helloClosureDelegate doFirst  invoked"

    }

    doLast {
        println "helloClosureDelegate doLast  invoked"

        new DelegateObject().test({
            println "thisObject: ${thisObject.getClass()}"
            println "owner: ${owner.getClass()}"
            println "delegate: ${delegate.getClass()}"
            // 我们主要看这两个方法到底调用的是哪个？？
            //
            method1()
            it.method1()
        })
    }
}

def method1() {
    println("method1 Root Context this:${this.getClass()} in Root")
    println("method1 Root invoked in Root")
}

class DelegateObject {
    def method1() {
        println("method1 DelegateObject Context this:${this.getClass()} in DelegateObject")
        println("method1 DelegateObject invoked in DelegateObject")
    }
    /**
     * 这个方法的参数传入的是一个闭包
     * @param closure
     * @return
     */
    def test(Closure<DelegateObject> closure) {
        closure(this)
    }
}


