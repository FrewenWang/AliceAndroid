apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


String gitBranch = 'git symbolic-ref --short -q HEAD'.execute().text.trim()

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    // 使用 DataBinding必须添加，切记！！！
    dataBinding {
        enabled = true
    }

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'


    //===================添加Aura整体开源框架依赖===============================
    if (gitBranch == "dev") {
        api project(path: ':aura-framework')
        api project(path: ':optimusnetwork')
        api project(path: ':aura-network')
        api project(path: ':aura-ui')
        api project(path: ':aura-toolkits')
    } else {
        api 'wang.frewen.aura:aura-toolkits:1.0.0'
        api 'wang.frewen.aura:aura-ui:1.0.0'
        api 'wang.frewen.aura:aura-framework:1.0.0'
    }
    //===================添加Aura整体开源框架依赖===============================

    //OKHttp内置拦截器 https://github.com/square/okhttp/tree/master/okhttp-logging-interceptor
    api dep.okhttp3Log

    //===================JetPack的Room框架依赖===============================
    // JetPack的Room框架：Room持久性库在 SQLite 的基础上提供了一个抽象层，
    // 让用户能够在充分利用 SQLite 的强大功能的同时，获享更强健的数据库访问机制。
    // https://developer.android.com/jetpack/androidx/releases/room
    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"
    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"
    //===================JetPack的Room框架依赖===============================


    api 'com.github.CarGuo.LazyRecyclerAdapter:CommonRecycler-Kotlin:v4.0.6'
    // https://github.com/H07000223/FlycoTabLayout
    api 'com.flyco.tablayout:FlycoTabLayout_Lib:2.1.2@aar'

}
