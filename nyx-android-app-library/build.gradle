apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
// Kotlin注解的一些功能会用到这个插件
apply plugin: 'kotlin-kapt'


String gitBranch = 'git symbolic-ref --short -q HEAD'.execute().text.trim()

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    // 使用 DataBinding必须添加，切记！！！
    dataBinding {
        enabled = true
    }

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    //=================<editor-folder desc = "Dependence:ViewPager2的依赖">=========================
    // https://developer.android.google.cn/jetpack/androidx/releases/viewpager2?hl=zh_cn
    api "androidx.viewpager2:viewpager2:1.0.0"
    //=================</editor-folder desc = "Dependence:ViewPager2的依赖">=========================

    //=================<editor-folder desc = "Dependence:JetPack开源框架依赖">========================
    //JetPack组件的依赖： https://developer.android.google.cn/jetpack

    //=================<editor-folder desc = "Dependence:Android KTX依赖">==========================
    // 添加依赖：https://developer.android.google.cn/kotlin/ktx
    // Android KTX 包含一个核心模块，该模块可为通用框架 API 提供 Kotlin 扩展程序，而且还能提供一些领域专用的扩展程序。
    api "androidx.core:core-ktx:1.3.1"
    //Collection KTX: Collection 扩展程序包含在 Android 的节省内存的集合库中使用的效用函数，包括 ArrayMap、LongParseArray、LruCache 等等。
    api "androidx.collection:collection-ktx:1.1.0"
    // Fragment KTX:Fragment KTX 模块提供了一系列扩展程序以简化 Fragment API。
    api "androidx.fragment:fragment-ktx:1.2.5"
    // Lifecycle KTX:Lifecycle KTX 为每个 Lifecycle 对象定义一个 LifecycleScope。在此范围内启动的协程会在 Lifecycle 被销毁时取消。
    // 您可以使用 lifecycle.coroutineScope 或 lifecycleOwner.lifecycleScope 属性访问 Lifecycle 的 CoroutineScope。
    api "androidx.lifecycle:lifecycle-runtime-ktx:2.2.0"
    // LiveData KTX:使用 LiveData 时，您可能需要异步计算值。例如，您可能需要检索用户的偏好设置并将其传送给界面。
    // 在这些情况下，LiveData KTX 可提供一个 liveData 构建器函数，该函数会调用 suspend 函数，并将结果作为 LiveData 对象传送。
    api "androidx.lifecycle:lifecycle-livedata-ktx:2.2.0"
    // Navigation KTX:Navigation 库的每个组件都有自己的 KTX 版本，用于调整 API 以使其更简洁且更符合 Kotlin 的语言习惯。
    api "androidx.navigation:navigation-runtime-ktx:2.3.0"
    api "androidx.navigation:navigation-fragment-ktx:2.3.0"
    api "androidx.navigation:navigation-ui-ktx:2.3.0"

    api 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    //=================</editor-folder desc = "Dependence:Android KTX依赖">==========================


    //=================<editor-folder desc = "Dependence:Paging分页库依赖">==========================
    def paging_version = "2.1.2"
    api "androidx.paging:paging-runtime:$paging_version" // For Kotlin use paging-runtime-ktx
    // alternatively - without Android dependencies for testing
    testApi "androidx.paging:paging-common:$paging_version" // For Kotlin use paging-common-ktx
    // optional - RxJava support
    api "androidx.paging:paging-rxjava2:$paging_version" // For Kotlin use paging-rxjava2-ktx
    //=================</editor-folder desc = "Dependence:Paging分页库依赖">=========================

    //=================<editor-folder desc = "Dependence:JetPack的Room框架依赖">======================
    // JetPack的Room框架：Room持久性库在 SQLite 的基础上提供了一个抽象层，
    // 让用户能够在充分利用 SQLite 的强大功能的同时，获享更强健的数据库访问机制。
    // https://developer.android.com/jetpack/androidx/releases/room
    def room_version = "2.2.5"
    api "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // 正常情况，我们就只需要依赖上面的两个依赖
    // For Kotlin use kapt instead of annotationProcessor
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"
    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"
    //=================</editor-folder desc = "Dependence:JetPack的Room框架依赖">=====================

    //=================</editor-folder desc = "Dependence:JetPack开源框架依赖">=======================


    //===================添加Aura整体开源框架依赖===============================
    if (gitBranch == "dev") {
        api project(path: ':aura-framework')
        api project(path: ':optimusnetwork')
        api project(path: ':aura-network')
        api project(path: ':aura-ui')
        api project(path: ':aura-toolkits')
    } else {
        api 'wang.frewen.aura:aura-toolkits:1.0.0'
        api 'wang.frewen.aura:aura-ui:1.0.0'
        api 'wang.frewen.aura:aura-framework:1.0.0'
    }
    //===================添加Aura整体开源框架依赖===============================

    //===================添加OKHttp网络请求框架===============================
    //OKHttp内置拦截器 https://github.com/square/okhttp/tree/master/okhttp-logging-interceptor
    implementation("com.squareup.okhttp3:logging-interceptor:4.8.0")
    //OKHttp请求的依赖框架：https://github.com/square/okhttp/
    implementation("com.squareup.okhttp3:okhttp:4.8.0")
    testImplementation("com.squareup.okhttp3:mockwebserver:4.8.0")
    //===================添加OKHttp网络请求框架===============================


    api 'com.github.CarGuo.LazyRecyclerAdapter:CommonRecycler-Kotlin:v4.0.6'
    // https://github.com/H07000223/FlycoTabLayout
    api 'com.flyco.tablayout:FlycoTabLayout_Lib:2.1.2@aar'

    /////////////////////////////////////////////////////////////////////////////////
    // 文章参考：https://x5.tencent.com/docs/access.html
    // 第一步：集成X5内核浏览器的依赖
    api 'com.tencent.tbs.tbssdk:sdk:43903'


    //=================<editor-folder desc = "Dependence:腾讯崩溃收集库Bugly">========================
    // Bugly的依赖库添加：https://bugly.qq.com/docs/user-guide/instruction-manual-android/?v=20200203205953
    //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.1.9
    api 'com.tencent.bugly:crashreport:latest.release'
    //其中latest.release指代最新Bugly NDK版本号，也可以指定明确的版本号，例如3.0
    api 'com.tencent.bugly:nativecrashreport:latest.release'
    //=================</editor-folder desc = "Dependence:腾讯崩溃收集库Bugly">=======================


    //======<editor-folder desc = "Dependence:SmartRefreshLayout的开源框架依赖">======================
    api 'com.scwang.smart:refresh-layout-kernel:2.0.1'      //核心必须依赖
    api 'com.scwang.smart:refresh-header-classics:2.0.1'    //经典刷新头
    api 'com.scwang.smart:refresh-header-radar:2.0.1'       //雷达刷新头
    api 'com.scwang.smart:refresh-header-falsify:2.0.1'     //虚拟刷新头
    api 'com.scwang.smart:refresh-header-material:2.0.1'    //谷歌刷新头
    api 'com.scwang.smart:refresh-header-two-level:2.0.1'   //二级刷新头
    api 'com.scwang.smart:refresh-footer-ball:2.0.1'        //球脉冲加载
    api 'com.scwang.smart:refresh-footer-classics:2.0.1'    //经典加载
    //======</editor-folder desc = "Dependence:SmartRefreshLayout的开源框架依赖">======================

}
